// Code generated by 'go generate'; DO NOT EDIT.

package bananaphone

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

func NtAllocateVirtualMemory(processHandle uintptr, baseAddress *uintptr, zeroBits uintptr, regionSize *uintptr, allocationType uint32, protect uint32) (err error) {
	bp, e := NewBananaPhone(AutoBananaPhoneMode)
	if e != nil {
		err = e
		return
	}
	//resolve the functions and extract the syscalls
	sysid, e := bp.GetSysID("NtAllocateVirtualMemory")
	if e != nil {
		err = e
		return
	}

	r1, e1 := Syscall(sysid, uintptr(processHandle), uintptr(unsafe.Pointer(baseAddress)), uintptr(zeroBits), uintptr(unsafe.Pointer(regionSize)), uintptr(allocationType), uintptr(protect))
	if r1 != 0 || e1 != nil {
		err = syscall.EINVAL
	}
	return
}

func NtAllocateVirtualMemoryManual(sysid uint16, processHandle uintptr, baseAddress *uintptr, zeroBits uintptr, regionSize *uintptr, allocationType uint32, protect uint32) (err error) {

	r1, e1 := Syscall(sysid, uintptr(processHandle), uintptr(unsafe.Pointer(baseAddress)), uintptr(zeroBits), uintptr(unsafe.Pointer(regionSize)), uintptr(allocationType), uintptr(protect))
	if r1 != 0 || e1 != nil {
		err = syscall.EINVAL
	}
	return
}

func NtProtectVirtualMemory(processHandle uintptr, baseAddress *uintptr, regionSize *uintptr, NewProtect uint32, oldprotect *uintptr) (err error) {
	bp, e := NewBananaPhone(AutoBananaPhoneMode)
	if e != nil {
		err = e
		return
	}
	//resolve the functions and extract the syscalls
	sysid, e := bp.GetSysID("NtProtectVirtualMemory")
	if e != nil {
		err = e
		return
	}

	r1, e1 := Syscall(sysid, uintptr(processHandle), uintptr(unsafe.Pointer(baseAddress)), uintptr(unsafe.Pointer(regionSize)), uintptr(NewProtect), uintptr(unsafe.Pointer(oldprotect)), 0)
	if r1 != 0 || e1 != nil {
		err = syscall.EINVAL
	}
	return
}

func NtProtectVirtualMemoryManual(sysid uint16, processHandle uintptr, baseAddress *uintptr, regionSize *uintptr, NewProtect uint32, oldprotect *uintptr) (err error) {

	r1, e1 := Syscall(sysid, uintptr(processHandle), uintptr(unsafe.Pointer(baseAddress)), uintptr(unsafe.Pointer(regionSize)), uintptr(NewProtect), uintptr(unsafe.Pointer(oldprotect)), 0)
	if r1 != 0 || e1 != nil {
		err = syscall.EINVAL
	}
	return
}

func NtCreateThreadEx(hostThread *uintptr, DesiredAccess uintptr, ObjectAttributes uintptr, ProcessHandle uintptr, LpStartAddress uintptr, LpParameter uintptr, Createsuspended uintptr, StackZeroBits uintptr, sizeofstackcommit uintptr, SizeOfStackReserve uintptr, lpBytesBuffer uintptr) (err error) {
	bp, e := NewBananaPhone(AutoBananaPhoneMode)
	if e != nil {
		err = e
		return
	}
	//resolve the functions and extract the syscalls
	sysid, e := bp.GetSysID("NtCreateThreadEx")
	if e != nil {
		err = e
		return
	}

	r1, e1 := Syscall(sysid, uintptr(unsafe.Pointer(hostThread)), uintptr(DesiredAccess), uintptr(ObjectAttributes), uintptr(ProcessHandle), uintptr(LpStartAddress), uintptr(LpParameter), uintptr(Createsuspended), uintptr(StackZeroBits), uintptr(sizeofstackcommit), uintptr(SizeOfStackReserve), uintptr(lpBytesBuffer), 0)
	if r1 != 0 || e1 != nil {
		err = syscall.EINVAL
	}
	return
}

func NtCreateThreadExManual(sysid uint16, hostThread *uintptr, DesiredAccess uintptr, ObjectAttributes uintptr, ProcessHandle uintptr, LpStartAddress uintptr, LpParameter uintptr, Createsuspended uintptr, StackZeroBits uintptr, sizeofstackcommit uintptr, SizeOfStackReserve uintptr, lpBytesBuffer uintptr) (err error) {

	r1, e1 := Syscall(sysid, uintptr(unsafe.Pointer(hostThread)), uintptr(DesiredAccess), uintptr(ObjectAttributes), uintptr(ProcessHandle), uintptr(LpStartAddress), uintptr(LpParameter), uintptr(Createsuspended), uintptr(StackZeroBits), uintptr(sizeofstackcommit), uintptr(SizeOfStackReserve), uintptr(lpBytesBuffer), 0)
	if r1 != 0 || e1 != nil {
		err = syscall.EINVAL
	}
	return
}
